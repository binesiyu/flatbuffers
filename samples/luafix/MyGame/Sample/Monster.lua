-- automatically generated by the FlatBuffers compiler, do not modify

-- namespace: Sample

local flatbuffers = require('flatbuffers')

local Monster = {} -- the module

function Monster.New()
    local o = {}
    setmetatable(o, {__index = function(t, key)
        local f = rawget(Monster, key)
    return f(t)
    end,
    __call = function(self,buf,pos)
        self.view = flatbuffers.view.New(buf, pos)
    end
    })    
return o
end
function Monster.GetRootAsMonster(buf, offset)
    if type(buf) == "string" then
        buf = flatbuffers.binaryArray.New(buf)
    end
    local n = flatbuffers.N.UOffsetT:Unpack(buf, offset)
    local o = Monster.New()
    o(buf, n + offset)
    return o
end
function Monster:pos()
    local o = self.view:Offset(4)
    if o ~= 0 then
        local x = o + self.view.pos
        local obj = require('MyGame.Sample.Vec3').New()
        obj(self.view.bytes, x)
        return obj
    end
end
function Monster:mana()
    local o = self.view:Offset(6)
    if o ~= 0 then
        return self.view:Get(flatbuffers.N.Int16, o + self.view.pos)
    end
    return 150
end
function Monster:hp()
    local o = self.view:Offset(8)
    if o ~= 0 then
        return self.view:Get(flatbuffers.N.Int16, o + self.view.pos)
    end
    return 100
end
function Monster:name()
    local o = self.view:Offset(10)
    if o ~= 0 then
        return self.view:String(o + self.view.pos)
    end
end
function Monster:inventory()
local ret = rawget(self, "_fb_inventory_arr")
if ret then
    return ret
end
ret = setmetatable({}, {
__len = function(t)
    local l = rawget(t, "_fb_inventory_len")
    if l then return l end
    local f = rawget(Monster, "inventoryLength")
    l = f(t)
    rawset(t, "_fb_inventory_len", l)
    return l
end,

__index = function(t, j)
    if type(j) == 'number' then
    local o = self.view:Offset(14)
    if o ~= 0 then
        local a = self.view:Vector(o)
        return self.view:Get(flatbuffers.N.Uint8, a + ((j-1) * 1))
    end
    return 0
    else
        return rawget(self, j)
    end
end,

__ipairs = function(t)
    local idx = 0
    local l = #t
    return function()
        idx = idx + 1
        if idx <= l then
            return idx, t[idx]
        end
    end
end
}
)
rawset(self, "_fb_inventory_arr", ret)
return ret
end
function Monster:InventoryAsString(start, stop)
    return self.view:VectorAsString(14, start, stop)
end
function Monster:inventoryLength()
    local o = self.view:Offset(14)
    if o ~= 0 then
        return self.view:VectorLen(o)
    end
    return 0
end
function Monster:color()
    local o = self.view:Offset(16)
    if o ~= 0 then
        return self.view:Get(flatbuffers.N.Int8, o + self.view.pos)
    end
    return 2
end
function Monster:weapons()
local ret = rawget(self, "_fb_weapons_arr")
if ret then
    return ret
end
ret = setmetatable({}, {
__len = function(t)
    local l = rawget(t, "_fb_weapons_len")
    if l then return l end
    local f = rawget(Monster, "weaponsLength")
    l = f(t)
    rawset(t, "_fb_weapons_len", l)
    return l
end,

__index = function(t, j)
    if type(j) == 'number' then
    local o = self.view:Offset(18)
    if o ~= 0 then
        local x = self.view:Vector(o)
        x = x + ((j-1) * 4)
        x = self.view:Indirect(x)
        local obj = require('MyGame.Sample.Weapon').New()
        obj(self.view.bytes, x)
        return obj
    end
    else
        return rawget(self, j)
    end
end,

__ipairs = function(t)
    local idx = 0
    local l = #t
    return function()
        idx = idx + 1
        if idx <= l then
            return idx, t[idx]
        end
    end
end
}
)
rawset(self, "_fb_weapons_arr", ret)
return ret
end
function Monster:weaponsLength()
    local o = self.view:Offset(18)
    if o ~= 0 then
        return self.view:VectorLen(o)
    end
    return 0
end
function Monster:equipped_type()
    local o = self.view:Offset(20)
    if o ~= 0 then
        return self.view:Get(flatbuffers.N.Uint8, o + self.view.pos)
    end
    return 0
end
function Monster:equipped()
    local o = self.view:Offset(22)
    if o ~= 0 then
        local obj = flatbuffers.view.New(flatbuffers.binaryarray.New(0), 0)
        self.view:Union(obj, o)
        return obj
    end
end
function Monster:path()
local ret = rawget(self, "_fb_path_arr")
if ret then
    return ret
end
ret = setmetatable({}, {
__len = function(t)
    local l = rawget(t, "_fb_path_len")
    if l then return l end
    local f = rawget(Monster, "pathLength")
    l = f(t)
    rawset(t, "_fb_path_len", l)
    return l
end,

__index = function(t, j)
    if type(j) == 'number' then
    local o = self.view:Offset(24)
    if o ~= 0 then
        local x = self.view:Vector(o)
        x = x + ((j-1) * 12)
        local obj = require('MyGame.Sample.Vec3').New()
        obj(self.view.bytes, x)
        return obj
    end
    else
        return rawget(self, j)
    end
end,

__ipairs = function(t)
    local idx = 0
    local l = #t
    return function()
        idx = idx + 1
        if idx <= l then
            return idx, t[idx]
        end
    end
end
}
)
rawset(self, "_fb_path_arr", ret)
return ret
end
function Monster:pathLength()
    local o = self.view:Offset(24)
    if o ~= 0 then
        return self.view:VectorLen(o)
    end
    return 0
end
function Monster.Start(builder) builder:StartObject(11) end
function Monster.AddPos(builder, pos) builder:PrependStructSlot(0, pos, 0) end
function Monster.AddMana(builder, mana) builder:PrependInt16Slot(1, mana, 150) end
function Monster.AddHp(builder, hp) builder:PrependInt16Slot(2, hp, 100) end
function Monster.AddName(builder, name) builder:PrependUOffsetTRelativeSlot(3, name, 0) end
function Monster.AddInventory(builder, inventory) builder:PrependUOffsetTRelativeSlot(5, inventory, 0) end
function Monster.StartInventoryVector(builder, numElems) return builder:StartVector(1, numElems, 1) end
function Monster.AddColor(builder, color) builder:PrependInt8Slot(6, color, 2) end
function Monster.AddWeapons(builder, weapons) builder:PrependUOffsetTRelativeSlot(7, weapons, 0) end
function Monster.StartWeaponsVector(builder, numElems) return builder:StartVector(4, numElems, 4) end
function Monster.AddEquippedType(builder, equippedType) builder:PrependUint8Slot(8, equippedType, 0) end
function Monster.AddEquipped(builder, equipped) builder:PrependUOffsetTRelativeSlot(9, equipped, 0) end
function Monster.AddPath(builder, path) builder:PrependUOffsetTRelativeSlot(10, path, 0) end
function Monster.StartPathVector(builder, numElems) return builder:StartVector(12, numElems, 4) end
function Monster.End(builder) return builder:EndObject() end

return Monster -- return the module
