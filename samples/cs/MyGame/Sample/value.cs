// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace MyGame.Sample
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct value : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static value GetRootAsvalue(ByteBuffer _bb) { return GetRootAsvalue(_bb, new value()); }
  public static value GetRootAsvalue(ByteBuffer _bb, value obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public value __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Keyname { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetKeynameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetKeynameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetKeynameArray() { return __p.__vector_as_array<byte>(4); }
  public string StringValue { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetStringValueBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetStringValueBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetStringValueArray() { return __p.__vector_as_array<byte>(6); }

  public static Offset<MyGame.Sample.value> Createvalue(FlatBufferBuilder builder,
      StringOffset keynameOffset = default(StringOffset),
      StringOffset stringValueOffset = default(StringOffset)) {
    builder.StartTable(2);
    value.AddStringValue(builder, stringValueOffset);
    value.AddKeyname(builder, keynameOffset);
    return value.Endvalue(builder);
  }

  public static void Startvalue(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddKeyname(FlatBufferBuilder builder, StringOffset keynameOffset) { builder.AddOffset(0, keynameOffset.Value, 0); }
  public static void AddStringValue(FlatBufferBuilder builder, StringOffset stringValueOffset) { builder.AddOffset(1, stringValueOffset.Value, 0); }
  public static Offset<MyGame.Sample.value> Endvalue(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    builder.Required(o, 4);  // keyname
    return new Offset<MyGame.Sample.value>(o);
  }

  public static VectorOffset CreateSortedVectorOfvalue(FlatBufferBuilder builder, Offset<value>[] offsets) {
    Array.Sort(offsets, (Offset<value> o1, Offset<value> o2) => Table.CompareStrings(Table.__offset(4, o1.Value, builder.DataBuffer), Table.__offset(4, o2.Value, builder.DataBuffer), builder.DataBuffer));
    return builder.CreateVectorOfTables(offsets);
  }

  public static value? __lookup_by_key(int vectorLocation, string key, ByteBuffer bb) {
    byte[] byteKey = System.Text.Encoding.UTF8.GetBytes(key);
    int span = bb.GetInt(vectorLocation - 4);
    int start = 0;
    while (span != 0) {
      int middle = span / 2;
      int tableOffset = Table.__indirect(vectorLocation + 4 * (start + middle), bb);
      int comp = Table.CompareStrings(Table.__offset(4, bb.Length - tableOffset, bb), byteKey, bb);
      if (comp > 0) {
        span = middle;
      } else if (comp < 0) {
        middle++;
        start += middle;
        span -= middle;
      } else {
        return new value().__assign(tableOffset, bb);
      }
    }
    return null;
  }
}


}
